Teacher : soorya.aaradhya@gmail.com
ng new Chocopap

/* ------------------------------------- */
/* FOLDER STRUCTURE & FILES              */
/* ------------------------------------- */

    1. Parent folder will be the main project folder
    2. .angular -> ignore this folder
    3. .vscode -> ignore this folder
    4. node_modules
        -> Packages will be installed here in the folder
        -> You don't have to go through these folders or Files
        -> Unless you are making changes to core libraries / modules
        -> npm install or ng add -> you would see the package here
    
    5. .editorconfig
        -> Make your custom editor changes in this files
    
    6. .gitignore
        -> We can add folders / files that we need to ignore while commiting
        -> node_modules ->

    7. angular.json
        -> Configuring your styles, js or for pipeline deployments
        -> Settings specific to you project
    
    8. package.json
        -> The installed dependencies of the project
        -> When we run npm install inside project -> the modules listed will be in

    9. package-lock.json
        -> same details of package.json + dev dependencies broken down in details
        -> Don't touch this manually

    10. tsconfig.app.json
        -> Tells you the Typescript configuration for your projects
        -> Don't touch it - for dev purpose

    11. tsconfig.spec.json
        -> Typescript test specific configuration

    12 ReadMe.md
        -> Starting file -> documentation of your project
    
    13. SRC -> this is source code of project

        APP 
            -> This is your actual code of your project / application
            -> Every component in angular
                -> has 4 files : 
                    -> .html -> templace / html
                    -> .scss or css or less -> style
                    -> .spec.ts -> unit test file
                    -> .ts -> component class / logical piece of component
            -> app.component.ts
                -> selector -> app-root
            
            -> app.component.spec.ts
                -> Unit testing
                -> Jasmine - writing the unit tests
                -> Karma -> test runner

        ASSETS
            -> Use this folder to serve the assets which are public

        FAVICON
            -> in the browser icon

        index.html
            -> Angular is a SPA
            -> There is only 1 HTML file -> index.html
            -> When we develop / build the app -> index.html
                <app-root>
                    First component to be initialized

        main.ts
            -> Entry point to your project
            -> Which is the first component to be rendered in your project

        styles.scss
            -> -css / .less / .scss -> extentions of css
            -> Global styling for your project


/* ------------------------------------- */
/* ANGULAR 17 CLI COMMANDS               */
/* ------------------------------------- */

    ng version -> gives you details of project -> packages, version, name etc
    ng new <project_name> -> will create a new project
    
    ng generate -> generate the required project component/module etc etc
        component
        module
        service
        pipe
        directive
        routing
        interface
        module
        classe

    ng test -> used for running the unit tests
        -> .spec.ts

    ng serve -> build and launch app locally

    ng build -> when its production ready
        -> dist forlder
            index.html
            stykes.css
            polyfills.js
            main.js
        -< make changes to settings in angular.json if needed
    
    (ng e2e -> Runs end-toend test using Protractor /!\ NOT ANYMORE IN THE v17)

    ng add @angular/material
        -> ng add for adding packages and modules of angular
            expl : ng add @angular/material
                The package @angular/material@17.3.8 will be installed and executed.
                Would you like to proceed? Yes
                ✔ Packages successfully installed.
                ? Choose a prebuilt theme name, or "custom" for a custom theme: Deep Purple/Ambe

    ng update 
        -> Update any angular application to other versions using ng update
    
    ng lint
        -> Linting making sure making Typescript is proper
        -> coding syntax
        -> patterns etc


/* ------------------------------------- */
/* GENERATE COMPOENTENT : APPMODULE      */
/* ------------------------------------- */
    1.  ng generate component <component name>

    2. But if you are on any other Angular version < 17
        -> Entry in module file
                AppModule
    3. The components are standalone = true by default
        -> No app.module in ANGULAR 17 & no need
        -> Otherwise you will get error

    4. angular.json 
        ->  Adding to schematics and disable standalone = false in angular.json

    Angular 17 vs Angular 16 and below
        1. Angular 16 and below used AppModule
            -> Its mandatory to have at least one module
            -> AppModule
            -> main.ts -> Bootstrap AppModule
        2. Angular 17 onwards
            -> Everything is standalone
            -> No mandatory module is required
            -> No AppModule ANYMORE
            -> BUT we can create our own custom modules
                    ng g module <module name>
            -> Is backward compatible
                -> Everything that you were dooing in Angular 16 is still valid
            -> -> main.ts -> Bootstrap AppComponent
            


/* ------------------------------------- */
/* ???              */
/* ------------------------------------- */

    AppModule  -> main.ts

2. Angular 17 onwards
    App.routes.ts -> AppRoutes
    App.routes.ts -> App.config.ts
    AppConfig -> main.ts

3. Can I still use Routing Module in Angular 17
    -> Yes
    -> Angular 17 is backwards compatible

4. ng g module <module name> --routing


/* ------------------------------------- */
/* STANDALONE COMPONENTS                 */
/* ------------------------------------- */
    ->  Which means its not dependant on modules
    ->  You will Not see AppModule file
    ->  It is not mandatory to have AppModule
    ->  However we can create custom modules if we want and it is totally supported
    ->  Components, Services or Pipes, Directives can be uses direcly and NO need to be injected in modules

    1. ng generate component <component_name>
        ng g c <component_name> -> will create a new folder 
        ng g c <component_name> --flat -> Will add the files in the app folder
    
    2. ng g c <component_name> --standalone false 
        -> generate an error if you don't have any module
        -> you will need a module mandatory
        -> You can generate a component by put standalone at false in angular.json the create the component
            ng g c <component name> --standalone false --module=<module name> --dry-run


/* ------------------------------------- */
/* HOW TO USE COMPONENTS                 */
/* ------------------------------------- */
    1. ng g c <compoent name>

    2. by default, each component will have a prefix -> app<component name>

    3. unique selector name4. 
    
    4. <component name></component_name>

    5. 
        cart
            Products
                Product1
                    Description
                    Images
                    Reviews
                    Rating
                Product2
            Payment
                Netbanking
                CreditCard

/* ------------------------------------- */
/*  COMPONENTS COMMUNICATION             */
/* ------------------------------------- */

    Chocopap [Parent]
        accueil [Child]
        menu [Child]
        boutique [Child]

    1. INPUT()
        - In parent.html : 
            <app-child [message]="messageForComponent" [Token]="userToken"></app-child>
        
        -in parent.ts :
            export class ChildComponent {
                messageForComponent : string ="From parent;
                userToken: string ="From parent 074f5sd";
            }

        - In child.ts : 
            export class ChildComponent {
                @Input()message: string ="";
                @Input()token: string ="";
            }

        - In child.html : 
            <p>{{message}}</p>
            <p>{{token}}</p>

    2. OUTPUT()
        - In child.ts : 
            <button click="sendMessage';">Send message to parent</button>

        - In child.ts : 
            export class ChildComponent {
                @Input()message: string ="";
                @Input()token: string ="";

                @output() messageEvent = new EventEmitter<string>()
                
                sendMessage(){
                    this.messageEvent.emit("Hello from Child to Parent");
                }
            }

        - In parent.html : 
            <app-child [message]="messageForComponent" [Token]="userToken" (messageEvent)="receiveMessage($event)></app-child>
            <p>{{ receivedgMessage }}</p>

        
        -in parent.ts :
            export class ChildComponent {
                messageForComponent : string ="From parent;
                userToken: string ="From parent 074f5sd";

                receivedgMessage : string = "";
                receiveMessage(message: string) void {
                    this.receivedMessage = message ;
                }
            }


/* ------------------------------------- */
/*  TYPES OF MODULES                     */
/* ------------------------------------- */

1. Feature Module
    Payments
    Users
    Crew
    AirLines
    Invoices

2. Shared Module
    Header
    Authentication
    Authorization

3. Lazy Loading Module
    -> on demande
    -> Home page
        Users
    
    -> Cart / Checkout page
        Payments













ng g s data => création de data.service.ts
npm install fontawsome
pwd => Pour savoir où l'on se situe dans le projet
