https://create-react-app.dev/docs/adding-a-sass-stylesheet

https://github.com/atoulmet/atoulmet-OC-React-Beginners/tree/P3C3-Solution/src/datas

Import pour utilisation de fichier .scss : 
npm install sass
npm i sass --save-dev

/.\ RESTART THE SERVER

Now you can rename src/App.css to src/App.scss and update src/App.js to import src/App.scss. This file and any other file will be automatically compiled if imported with the extension .scss or .sass.
To share variables between Sass files, you can use Sass's @use rule. For example, src/App.scss and other component style files could include @use "./shared.scss"; with variable definitions.


Installer bootstrap & bootstra icones :
https://create-react-app.dev/docs/adding-bootstrap/
https://www.npmjs.com/package/react-bootstrap-icons
npm install bootstrap
import 'bootstrap/dist/css/bootstrap.css';

npm install react-bootstrap-icons --save
import * as Icon from 'react-bootstrap-icons';
import { ArrowRight } from 'react-bootstrap-icons';


/* ------------------------------------------------------------------------------- */
/*  Pourquoi REACT                                                                 */
/* ------------------------------------------------------------------------------- */

Chaque langage a ses atouts et ses inconv√©nients. On peut compter parmi les atouts de React : 

sa modularit√©, qui permet de choisir les bons outils en fonction du projet √† d√©velopper ;
les opportunit√©s professionnelles que React offre ;
sa syntaxe, cr√©√©e par les √©quipes de React, le JSX, qui r√©unit la structure, le style et les interactions, est tr√®s efficace. 
En revanche, du fait de la modularit√© de React, il faut souvent se poser la question des outils qui seront utilis√©s pour d√©velopper son projet. 


/* ------------------------------------------------------------------------------- */
/*  transformer un fichier HTML en app React sur CodePen                           */
/* ------------------------------------------------------------------------------- */
Bonnes pratiques : 
        - importer les liens CDN React et ReactDOM
        - attacher l'app React au HTML avec ReactDOM.render(<MonApp />, document.getElementById( 'monId')).
        - param√©trer Babel.

Pour transformer un fichier HTML en app React sur CodePen, il faut importer les liens CDN pour React et ReactDOM, que l'on peut trouver dans la documentation de React.

De la m√™me mani√®re, pour coder au mieux, on doit utiliser Babel.

Ensuite, il faut ancrer l'app React au HTML avec ReactDOM.render, mais pour √ßa on a besoin de lui pr√©ciser o√π s'attacher. Une bonne solution est d'utiliser un id. Mais un className, m√™me si ce n'est pas une bonne mani√®re de faire, pourrait fonctionner.


/* ------------------------------------------------------------------------------- */
/*  INITIATION  JSX                                                                */
/* ------------------------------------------------------------------------------- */

Il s‚Äôagit de l'extension JavaScript cr√©√©e par React,
qui permet d‚Äôutiliser notre syntaxe sous forme de tags directement dans le code JavaScript.

Certaines r√®gles sont √† respecter en JSX : 
        - le nom d'un composant doit commencer par une majuscule ;
        - les composants doivent toujours √™tre wrapp√©s par un seul composant parent ;
        - les balises doivent toujours √™tre ferm√©es.



            function Header() {
                return (<div>
                    <h1>La maison jungle</h1>
                </div>)
            }

            function Description() {
                return (<p>Ici achetez toutes les plantes dont vous avez toujours r√™v√© üåµüå±üéç</p>)
            }



React met √©galement √† notre disposition un outil, les Fragments, si on veut wrapper 
deux composants dans un seul parent sans que le parent apparaisse dans le DOM.
 Pour √ßa, vous pouvez faire :

            ReactDOM.render(<React.Fragment><Header /><Description /></React.Fragment>, document.getElementById("root"))



En JSX, toutes les balises doivent √™tre ferm√©es, y compris les √©l√©ments HTML autofermants tels que input : <input />
            <Parent>
                <Enfant />
                <Enfant />
                <Enfant />
            </Parent>



/* ------------------------------------------------------------------------------- */
/*  structurer notre interface en arborescences de composants                      */
/* ------------------------------------------------------------------------------- */

D√©clarer un composant : 
            => const MyComponent = () => (<div>Hello World</div>)
            => function MyComponent() { return (<div>Hello World</div>)}
            => class MyComponent extends React.Component {render() {return <div>Hello World</div>}}

Regroupons notre Titre et notre Description dans une banni√®re : 

            function Banner() {
                return (<div>
                    <Header />
                    <Description />
                </div>)
            }


/* ------------------------------------------------------------------------------- */
/*  Les expression JavaScript sont √©crites entre accolades {}                      */
/* ------------------------------------------------------------------------------- */

<div>La grande r√©ponse sur la vie, l'univers et le reste est { 6 * 7 } </div>
<div>{ alexia.toUpperCase() }</div>
<div>{ 2 > 0 ? 'Deux est plus grand que z√©ro' : 'Ceci n'appara√Ætra jamais }</div>}
<div>{ myTitle }</div>
<div>{ 42 }</div>

function Description() {
    const text = "Ici achetez toutes les plantes dont vous avez toujours r√™v√©es"
    const emojis = "ü§ëü§ëü§ë"
    return (<p>{ text.slice(0, 11) + emojis }</p>)
}

------------------------------------------------------------------------------------------------------------------------
EXEMPLE : 

HTML : 
<div id="root"></div>


JS(Babel)
function Banner() {
const title = "La maison jungle"
  return (<h1>{title.toUpperCase()}</h1>)
}

function Cart() {
const monsteraPrice = 8
const ivyPrice = 10
const flowerPrice = 15
return (<div>
    <h2>Panier</h2>
    <ul>
        <li>Monstera : {monsteraPrice}‚Ç¨</li>
        <li>Lierre : {ivyPrice}‚Ç¨</li>
        <li>Fleurs : {flowerPrice}‚Ç¨</li>
    </ul>
      Total : {monsteraPrice + ivyPrice + flowerPrice }‚Ç¨
      </div>)
}

ReactDOM.render(<div><Banner /><Cart /></div>, document.getElementById('root'))

------------------------------------------------------------------------------------------------------------------------

ReactDOM.render(<div><Banner /><Cart /></div>, document.getElementById('root')) n'est pas
utilisable avec App.js. Pour avoir importer un component, on peut cr√©er un fichier avec la
function correspondante et l'exporter : 

            function Banner() {
                const title = "La maison jungle"
                return (<h1>{title}</h1>)
                }
                
            export default Banner

Pour ensuite l'appler dans App.js : <Banner />


/* ------------------------------------------------------------------------------- */
/*  Incorporer du style et des assets au projet                                    */
/* ------------------------------------------------------------------------------- */

Comme en HTML, nous pouvons associer des attributs √† nos √©l√©ments.
Les attributs HTML tels que id, href pour un lien <a />, src pour une balise <img />,
fonctionnent normalement en JSX.

/!\/!\/!\ En revanche, il existe des mots r√©serv√©s en JavaScript, tels que  class. /!\/!\/!\
Il suffit pour cela d'utiliser l'attribut  className  , et de lui pr√©ciser une string.
D'ailleurs, vous pouvez utiliser plusieurs classes sur un √©l√©ment en les mettant √† la suite,
s√©par√©es par un espace.