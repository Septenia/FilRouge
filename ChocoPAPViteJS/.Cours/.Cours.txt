https://www.linkedin.com/learning/l-essentiel-de-react-js/aborder-les-prerequis?autoSkip=true&resume=false&u=43271628
https://www.linkedin.com/learning/l-essentiel-de-react-js-18726291/aborder-react?autoSkip=true&resume=false&u=43271628

https://facebook.github.io/jsx/
BabelJs

https://react.dev/

https://fr.legacy.reactjs.org/


/* ------------------------------------- */
/*  PREREQUIS                    */
/* ------------------------------------- */

Langage : JSX
ECMAscript

Il faut
1 navigateur (chrome)
1 editeur de texte (visual studio code)
1 La dernière version de node.js
1 Un gestionnaire de paquets : npm ou yarn

/* ------------------------------------------------------------------------------------- */
/*  Installation des dépendances pour créer un tout nouveau projet React                 */
/* ------------------------------------------------------------------------------------- */
	(commande : npm install xxx )
	
	1. Installer CRA (create react app) - Interface de ligne de commande, boite à outil intégrée - 
	URL : create-react-app.dev/#quick-start > Get started
	
	npm install -g create-react-app
	npx create-react-app my-app
	cd my-app
	npm start

	B Installer React Developer Tools (extension chrome)
	https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi/related
	

/* ------------------------------------------------------------------------------------- */
/*  Créer un composant simple                                                            */
/* ------------------------------------------------------------------------------------- */
	
	Dans App.js : 
	
            import logo from "./logo.svg";
            import LogoFleuRire from "./LogoFleurRire.svg";
            import "./App.css";

            const AppLink = () => {
              const variable = "React";
              return (
                <a
                  className="App-link"
                  href="https://reactjs.org"
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  Learn {variable} {9 * 2}+
                </a>
              );
            };

            const Logo = ({ svg }) => (
              <img id="logo" src={logo} className="App-logo" alt="logo" />
            );

            function App() {
              const handleOnClick = (svg) => {
                const logo = document.getElementById("logo");
                logo.src = svg;
              };
              return (
                <div className="App">
                  <header className="App-header">
                    <Logo />
                    <p>
                      Edit <code>src/App.js</code> and save to reload.
                    </p>
                    <AppLink />
                    <button onClick={() => handleOnClick(logo)}>Blue</button>
                    <button onClick={() => handleOnClick(LogoFleuRire)}>pink</button>
                  </header>
                </div>
              );
            }

            export default App;



/* ------------------------------------------------------------------------------------- */
/*  Utiliser les hooks (crochets)                                                        */
/* ------------------------------------------------------------------------------------- */
  Ce sont des fonctions javascript arrivés en 2018 avec la version 16.8 de react.
  Grâce aux hooks, il est possible de créer des composants fonctionnels avec de la logique.

  1. Importer dans App.js
          import { useState, useEffect } from "react";

	2. Le { useState } permet de maintenir un état local dans un composant fonctionnel.

          pour la fonction, toujours commencer par set, cela indique que l'on va changer la valeur de la variable (ici : title) : 
              const { title, setTitle } = useState("React")

------------------------------------------------------------------------------------------------------------------------------------
Exemple : 

            import React, { useState } from 'react' ; 

            function Example() {
              // Declare a new state variable, which we'll call "count"
              const [count, setCount] = useState(0);

              return(
                <div>
                  <p>You Clicked {count} times </p>
                  <button onClick={() => setCount(count + 1)}> 
                    Click me
                  </button>
                </div>
              );
            }
------------------------------------------------------------------------------------------------------------------------------------


  3. Le { useEffet } permet d'appliquer des effects de bord.
    
    Le crochet d'effet permet d'effectuer des effets secondaires dans les composants fonctionnels.
    C'est quand il y a un changement d'état dans la dépendance (expl title) que react va 

  ------------------------------------------------------------------------------------------------------------------------------------
Exemple : 

            import React, { useState, useEffect } from 'react' ; 

            function Example() {
              const [count, setCount] = useState(0);

              // Similar to componentDidMount and componentDidUpdate
              useEffect(() => {
                // Update the document title using the browser API
                document.title = 'You clicked $(count) times';
              });

              return(
                <div>
                  <p>You Clicked {count} times </p>
                  <button onClick={() => setCount(count + 1)}> 
                    Click me
                  </button>
                </div>
              );
            }
------------------------------------------------------------------------------------------------------------------------------------



  4. linter : les règles d'usage

    A. installer Plugin ESLintComment qui permet de rappeler les règles d'uages des hooks
       URL : reactjs.org/docs/hooks-rules.html#eslint-plugin
       URL : npmjs.com/package/eslint-plugin-react-hooks

          npm install eslint-plugin-react-hooks --save-dev
          Créer un fichier .eslintrc.json
              {
                    "extends" : [
                        "plugin:react-hooks/recommanded"
                    ]
                }